2. Analysera de beroenden som finns med avseende på cohesion och coupling, och Dependency Inversion Principle.

a) Vilka beroenden är nödvändiga?
Det finns flera nödvändiga beroenden:
    - Car
        - Vehicle

    - Vehicle
        -Movable

    - Garage
        - Car
        - queLoader

    - Volvo240
        - Car

    - Saab95
        - Car

    - Scania
        - Vehicle
        - Platform

    - carTransport
        - Vehicle
        - Platform
        - stackLoader

    - Loader
        - Loadable

    - stackLoader
        - Loader
        - Itterable

    - queLoader
        - Loader

    - carController
        - volvo240
        - saab95
        - scania
        - garage
        - Timer
        - carVielw

    - carView
        - carController
        - drawPanel




b) Vilka klasser är beroende av varandra som inte borde vara det?
Det finns flera beroenden som inte borde vara nödvändiga:
    - CarView och CarController är beroende av varandraCa.
    - CarController är beroende av Garage, vilket inte borde vara nödvändigt då CarController endast ska kontrollera bilarna och inte garaget.
    - CarController är beroende av

c) Finns det starkare beroenden än nödvändigt?

d) Kan ni identifiera några brott mot övriga designprinciper vi pratat om i kursen?

Vad gäller cohesion finns det flera klasser med ganska låg cohesion. Exempelvis CarController som har
 flera ansvarsområden: både att kontrollera bilarnas beteenden, men också uppdatera vyn och skapa nya bilar.
 Detta hade eventuellt kunnat brytas ut i flera olika klasser med olika ansvarsområden.
Vi har även high coupling då flera klasser är beroende av varandra, vilket gör det svårt att ändra i koden. Exempelvis är
 CarView och CarController beroende av varandra.



 3. Analysera era klasser med avseende på Separation of Concern (SoC) och Single Responsibility Principle (SRP).

a) Vilka ansvarsområden har era klasser?

    - Car: Subklass av Vehicle. Ansvarar inte för några nya beteenden, utan är snararare en representation för
           faktiska bilar (dvs inte lastbilar, biltransporter, osv).

    - CarController: Sköter bilarna i simulatorn. Skapar nya bilar, uppdaterar positioner och hastigheter,
                     samt uppdaterar vyn.

    - CarTransport: Subklass av Vehicle. Transportbil av andra bilar.

    - CarView: Ansvarar för allt som rör pop-up fönstret, dvs skapar knappar och definierar vad ett knapptryck ska
               resultera i. Innehåller också en s.k. listener som övervakar ifall knapptryck sker.

    - DrawPanel: Ansvarar för att rita ut och flytta bilarna i fönstret.

    - Garage: Ansvarar för att lagra bilar och hålla koll på dessa i en Array. Implementerar interfacet Loadable och
              kan därför både lasta och lossa bilar.

    - Loadable: Interface för att visa vad något lastbart ska kunna göra.

    - Loader: Abstrakt klass som ansvarar för att lasta och lossa bilar. Implementerar flera metoder
              och variabler som används av subklasserna.

    - Movable: Interface för att visa vad ett rörligt fordon ska kunna göra.

    - Platform: Interface för att visa vad en plattform ska kunna göra, dvs höjas och sänkas.

    - QueueLoader: Subklass av Loader. Implementerar en kö för att lasta och lossa bilar enligt FIFO-principen.

    - Saab95: Subklass av Car. Skapar nya Saab95-bilar och implementerar dess specifika beteenden såsom turbo.

    - Scania: Subklass av Vehicle. Skapar nya Scania-bilar och implementerar en platformsfunktion mha interfacet platform.

    - StackLoader: Subklass av Loader. Implementerar en stack för att lasta och lossa bilar enligt LIFO-principen.

    - Vehicle: Abstrakt klass som ansvarar för information och rörelsemönster om fordon och  implementerar
               dess specifika beteenden.

    - Volvo 240: Subklass av Car. Skapar nya Volvo 240-bilar och implementerar dess specifika beteenden.



b) Vilka anledningar har de att förändras?

c) På vilka klasser skulle ni behöva tillämpa dekomposition för att bättre följa SoC och SRP?


Man hade kunnat göra två olika klasser (dekomposition); en som
               sköter knapptryckningar och som sköter själva fönstret. Skulle bli lättare att läsa och det
               skulle bli lättare att hitta saker i klasserna, samt blir det bättre med avsikt på SoC
