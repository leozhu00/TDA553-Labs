2. Analysera de beroenden som finns med avseende på cohesion och coupling, och Dependency Inversion Principle.

a) Vilka beroenden är nödvändiga?
Det finns flera nödvändiga beroenden:
    - Garage är beroende av Car, vilket krävs för att kunna lagra bilar i garaget.
    - De olika bilarna är beroende av Car/Vehicle, vilket krävs för att kunna skapa nya instanser av bilar.
    - CarController är beroende av Garage, Vehicle, vilket krävs för att kunna kontrollera garaget och bilarna, samt skapa nya instanser.
    - CarController är beroende av Timer, vilket krävs för att kunna använda timern för att simulera tiden.
    - CarController är beroende av CarView, vilket krävs för att kunna uppdatera CarView.


b) Vilka klasser är beroende av varandra som inte borde vara det?
Det finns flera beroenden som inte borde vara nödvändiga:
    - CarView och CarController är beroende av varandraCa.
    - CarController är beroende av Garage, vilket inte borde vara nödvändigt då CarController endast ska kontrollera bilarna och inte garaget.
    - CarController är beroende av

c) Finns det starkare beroenden än nödvändigt?

d) Kan ni identifiera några brott mot övriga designprinciper vi pratat om i kursen?

Vad gäller cohesion finns det flera klasser med ganska låg cohesion. Exempelvis CarController som har
 flera ansvarsområden: både att kontrollera bilarnas beteenden, men också uppdatera vyn och skapa nya bilar.
 Detta hade eventuellt kunnat brytas ut i flera olika klasser med olika ansvarsområden.
Vi har även high coupling då flera klasser är beroende av varandra, vilket gör det svårt att ändra i koden. Exempelvis är
 CarView och CarController beroende av varandra.



 3. Analysera era klasser med avseende på Separation of Concern (SoC) och Single Responsibility Principle (SRP).

a) Vilka ansvarsområden har era klasser?
    - Car:
    - CarController:
    - CarTransport:
    - CarView:
    - DrawPanel:
    - Garage:
    - Loadable:
    - Loader:
    - Movable:
    - Platform:
    - QueueLoader:
    - Saab95:
    - Scania:
    - StackLoader:
    - Vehicle:
    - Volvo 240:

b)Vilka anledningar har de att förändras?

c) På vilka klasser skulle ni behöva tillämpa dekomposition för att bättre följa SoC och SRP?
